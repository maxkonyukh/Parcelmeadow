// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/service.go
//
// Generated by this command:
//
//	mockgen -destination ./internal/services/mock/generated/service.go -source ./internal/services/service.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	database "parcelmeadow/internal/database"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetTodayParcels mocks base method.
func (m *MockStorage) GetTodayParcels() ([]database.Parcel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodayParcels")
	ret0, _ := ret[0].([]database.Parcel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodayParcels indicates an expected call of GetTodayParcels.
func (mr *MockStorageMockRecorder) GetTodayParcels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodayParcels", reflect.TypeOf((*MockStorage)(nil).GetTodayParcels))
}

// GetTodayRoutes mocks base method.
func (m *MockStorage) GetTodayRoutes() ([]database.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodayRoutes")
	ret0, _ := ret[0].([]database.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodayRoutes indicates an expected call of GetTodayRoutes.
func (mr *MockStorageMockRecorder) GetTodayRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodayRoutes", reflect.TypeOf((*MockStorage)(nil).GetTodayRoutes))
}

// SaveParcel mocks base method.
func (m *MockStorage) SaveParcel(parcel database.Parcel) (database.Parcel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveParcel", parcel)
	ret0, _ := ret[0].(database.Parcel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveParcel indicates an expected call of SaveParcel.
func (mr *MockStorageMockRecorder) SaveParcel(parcel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveParcel", reflect.TypeOf((*MockStorage)(nil).SaveParcel), parcel)
}
