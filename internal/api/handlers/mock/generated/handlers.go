// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/api/handlers/handlers.go
//
// Generated by this command:
//
//	mockgen -destination ./internal/api/handlers/mock/generated/handlers.go -source ./internal/api/handlers/handlers.go
//

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	models "parcelmeadow/internal/api/generated/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateParcel mocks base method.
func (m *MockService) CreateParcel(parcel *models.ParcelV1) (models.ParcelV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParcel", parcel)
	ret0, _ := ret[0].(models.ParcelV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateParcel indicates an expected call of CreateParcel.
func (mr *MockServiceMockRecorder) CreateParcel(parcel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParcel", reflect.TypeOf((*MockService)(nil).CreateParcel), parcel)
}

// GetTodayParcels mocks base method.
func (m *MockService) GetTodayParcels() ([]*models.ParcelV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodayParcels")
	ret0, _ := ret[0].([]*models.ParcelV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodayParcels indicates an expected call of GetTodayParcels.
func (mr *MockServiceMockRecorder) GetTodayParcels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodayParcels", reflect.TypeOf((*MockService)(nil).GetTodayParcels))
}

// GetTodayRoutes mocks base method.
func (m *MockService) GetTodayRoutes() ([]*models.RouteV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodayRoutes")
	ret0, _ := ret[0].([]*models.RouteV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodayRoutes indicates an expected call of GetTodayRoutes.
func (mr *MockServiceMockRecorder) GetTodayRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodayRoutes", reflect.TypeOf((*MockService)(nil).GetTodayRoutes))
}
