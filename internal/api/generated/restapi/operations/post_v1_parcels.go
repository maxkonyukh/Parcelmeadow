// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostV1ParcelsHandlerFunc turns a function with the right signature into a post v1 parcels handler
type PostV1ParcelsHandlerFunc func(PostV1ParcelsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostV1ParcelsHandlerFunc) Handle(params PostV1ParcelsParams) middleware.Responder {
	return fn(params)
}

// PostV1ParcelsHandler interface for that can handle valid post v1 parcels params
type PostV1ParcelsHandler interface {
	Handle(PostV1ParcelsParams) middleware.Responder
}

// NewPostV1Parcels creates a new http.Handler for the post v1 parcels operation
func NewPostV1Parcels(ctx *middleware.Context, handler PostV1ParcelsHandler) *PostV1Parcels {
	return &PostV1Parcels{Context: ctx, Handler: handler}
}

/*
	PostV1Parcels swagger:route POST /v1/parcels postV1Parcels

parcels

Creates a parcel.
*/
type PostV1Parcels struct {
	Context *middleware.Context
	Handler PostV1ParcelsHandler
}

func (o *PostV1Parcels) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostV1ParcelsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
